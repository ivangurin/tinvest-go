// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	contractv1 "tinvest-go/internal/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// OperationsAPIMock is an autogenerated mock type for the OperationsAPIMock type
type OperationsAPIMock struct {
	mock.Mock
}

type OperationsAPIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OperationsAPIMock) EXPECT() *OperationsAPIMock_Expecter {
	return &OperationsAPIMock_Expecter{mock: &_m.Mock}
}

// GetBrokerReport provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetBrokerReport(ctx context.Context, in *contractv1.BrokerReportRequest, opts ...grpc.CallOption) (*contractv1.BrokerReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBrokerReport")
	}

	var r0 *contractv1.BrokerReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.BrokerReportRequest, ...grpc.CallOption) (*contractv1.BrokerReportResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.BrokerReportRequest, ...grpc.CallOption) *contractv1.BrokerReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.BrokerReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.BrokerReportRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetBrokerReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrokerReport'
type OperationsAPIMock_GetBrokerReport_Call struct {
	*mock.Call
}

// GetBrokerReport is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.BrokerReportRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetBrokerReport(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetBrokerReport_Call {
	return &OperationsAPIMock_GetBrokerReport_Call{Call: _e.mock.On("GetBrokerReport",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetBrokerReport_Call) Run(run func(ctx context.Context, in *contractv1.BrokerReportRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetBrokerReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.BrokerReportRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetBrokerReport_Call) Return(_a0 *contractv1.BrokerReportResponse, _a1 error) *OperationsAPIMock_GetBrokerReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetBrokerReport_Call) RunAndReturn(run func(context.Context, *contractv1.BrokerReportRequest, ...grpc.CallOption) (*contractv1.BrokerReportResponse, error)) *OperationsAPIMock_GetBrokerReport_Call {
	_c.Call.Return(run)
	return _c
}

// GetDividendsForeignIssuer provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetDividendsForeignIssuer(ctx context.Context, in *contractv1.GetDividendsForeignIssuerRequest, opts ...grpc.CallOption) (*contractv1.GetDividendsForeignIssuerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDividendsForeignIssuer")
	}

	var r0 *contractv1.GetDividendsForeignIssuerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetDividendsForeignIssuerRequest, ...grpc.CallOption) (*contractv1.GetDividendsForeignIssuerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetDividendsForeignIssuerRequest, ...grpc.CallOption) *contractv1.GetDividendsForeignIssuerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetDividendsForeignIssuerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetDividendsForeignIssuerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetDividendsForeignIssuer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDividendsForeignIssuer'
type OperationsAPIMock_GetDividendsForeignIssuer_Call struct {
	*mock.Call
}

// GetDividendsForeignIssuer is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetDividendsForeignIssuerRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetDividendsForeignIssuer(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetDividendsForeignIssuer_Call {
	return &OperationsAPIMock_GetDividendsForeignIssuer_Call{Call: _e.mock.On("GetDividendsForeignIssuer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetDividendsForeignIssuer_Call) Run(run func(ctx context.Context, in *contractv1.GetDividendsForeignIssuerRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetDividendsForeignIssuer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetDividendsForeignIssuerRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetDividendsForeignIssuer_Call) Return(_a0 *contractv1.GetDividendsForeignIssuerResponse, _a1 error) *OperationsAPIMock_GetDividendsForeignIssuer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetDividendsForeignIssuer_Call) RunAndReturn(run func(context.Context, *contractv1.GetDividendsForeignIssuerRequest, ...grpc.CallOption) (*contractv1.GetDividendsForeignIssuerResponse, error)) *OperationsAPIMock_GetDividendsForeignIssuer_Call {
	_c.Call.Return(run)
	return _c
}

// GetOperations provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetOperations(ctx context.Context, in *contractv1.OperationsRequest, opts ...grpc.CallOption) (*contractv1.OperationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 *contractv1.OperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.OperationsRequest, ...grpc.CallOption) (*contractv1.OperationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.OperationsRequest, ...grpc.CallOption) *contractv1.OperationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.OperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.OperationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperations'
type OperationsAPIMock_GetOperations_Call struct {
	*mock.Call
}

// GetOperations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.OperationsRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetOperations(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetOperations_Call {
	return &OperationsAPIMock_GetOperations_Call{Call: _e.mock.On("GetOperations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetOperations_Call) Run(run func(ctx context.Context, in *contractv1.OperationsRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.OperationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetOperations_Call) Return(_a0 *contractv1.OperationsResponse, _a1 error) *OperationsAPIMock_GetOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetOperations_Call) RunAndReturn(run func(context.Context, *contractv1.OperationsRequest, ...grpc.CallOption) (*contractv1.OperationsResponse, error)) *OperationsAPIMock_GetOperations_Call {
	_c.Call.Return(run)
	return _c
}

// GetOperationsByCursor provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetOperationsByCursor(ctx context.Context, in *contractv1.GetOperationsByCursorRequest, opts ...grpc.CallOption) (*contractv1.GetOperationsByCursorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationsByCursor")
	}

	var r0 *contractv1.GetOperationsByCursorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOperationsByCursorRequest, ...grpc.CallOption) (*contractv1.GetOperationsByCursorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOperationsByCursorRequest, ...grpc.CallOption) *contractv1.GetOperationsByCursorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetOperationsByCursorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetOperationsByCursorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetOperationsByCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperationsByCursor'
type OperationsAPIMock_GetOperationsByCursor_Call struct {
	*mock.Call
}

// GetOperationsByCursor is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetOperationsByCursorRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetOperationsByCursor(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetOperationsByCursor_Call {
	return &OperationsAPIMock_GetOperationsByCursor_Call{Call: _e.mock.On("GetOperationsByCursor",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetOperationsByCursor_Call) Run(run func(ctx context.Context, in *contractv1.GetOperationsByCursorRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetOperationsByCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetOperationsByCursorRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetOperationsByCursor_Call) Return(_a0 *contractv1.GetOperationsByCursorResponse, _a1 error) *OperationsAPIMock_GetOperationsByCursor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetOperationsByCursor_Call) RunAndReturn(run func(context.Context, *contractv1.GetOperationsByCursorRequest, ...grpc.CallOption) (*contractv1.GetOperationsByCursorResponse, error)) *OperationsAPIMock_GetOperationsByCursor_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolio provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetPortfolio(ctx context.Context, in *contractv1.PortfolioRequest, opts ...grpc.CallOption) (*contractv1.PortfolioResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolio")
	}

	var r0 *contractv1.PortfolioResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PortfolioRequest, ...grpc.CallOption) (*contractv1.PortfolioResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PortfolioRequest, ...grpc.CallOption) *contractv1.PortfolioResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.PortfolioResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.PortfolioRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetPortfolio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolio'
type OperationsAPIMock_GetPortfolio_Call struct {
	*mock.Call
}

// GetPortfolio is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.PortfolioRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetPortfolio(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetPortfolio_Call {
	return &OperationsAPIMock_GetPortfolio_Call{Call: _e.mock.On("GetPortfolio",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetPortfolio_Call) Run(run func(ctx context.Context, in *contractv1.PortfolioRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetPortfolio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.PortfolioRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetPortfolio_Call) Return(_a0 *contractv1.PortfolioResponse, _a1 error) *OperationsAPIMock_GetPortfolio_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetPortfolio_Call) RunAndReturn(run func(context.Context, *contractv1.PortfolioRequest, ...grpc.CallOption) (*contractv1.PortfolioResponse, error)) *OperationsAPIMock_GetPortfolio_Call {
	_c.Call.Return(run)
	return _c
}

// GetPositions provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetPositions(ctx context.Context, in *contractv1.PositionsRequest, opts ...grpc.CallOption) (*contractv1.PositionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPositions")
	}

	var r0 *contractv1.PositionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PositionsRequest, ...grpc.CallOption) (*contractv1.PositionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PositionsRequest, ...grpc.CallOption) *contractv1.PositionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.PositionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.PositionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetPositions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPositions'
type OperationsAPIMock_GetPositions_Call struct {
	*mock.Call
}

// GetPositions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.PositionsRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetPositions(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetPositions_Call {
	return &OperationsAPIMock_GetPositions_Call{Call: _e.mock.On("GetPositions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetPositions_Call) Run(run func(ctx context.Context, in *contractv1.PositionsRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetPositions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.PositionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetPositions_Call) Return(_a0 *contractv1.PositionsResponse, _a1 error) *OperationsAPIMock_GetPositions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetPositions_Call) RunAndReturn(run func(context.Context, *contractv1.PositionsRequest, ...grpc.CallOption) (*contractv1.PositionsResponse, error)) *OperationsAPIMock_GetPositions_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawLimits provides a mock function with given fields: ctx, in, opts
func (_m *OperationsAPIMock) GetWithdrawLimits(ctx context.Context, in *contractv1.WithdrawLimitsRequest, opts ...grpc.CallOption) (*contractv1.WithdrawLimitsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawLimits")
	}

	var r0 *contractv1.WithdrawLimitsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.WithdrawLimitsRequest, ...grpc.CallOption) (*contractv1.WithdrawLimitsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.WithdrawLimitsRequest, ...grpc.CallOption) *contractv1.WithdrawLimitsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.WithdrawLimitsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.WithdrawLimitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationsAPIMock_GetWithdrawLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawLimits'
type OperationsAPIMock_GetWithdrawLimits_Call struct {
	*mock.Call
}

// GetWithdrawLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.WithdrawLimitsRequest
//   - opts ...grpc.CallOption
func (_e *OperationsAPIMock_Expecter) GetWithdrawLimits(ctx interface{}, in interface{}, opts ...interface{}) *OperationsAPIMock_GetWithdrawLimits_Call {
	return &OperationsAPIMock_GetWithdrawLimits_Call{Call: _e.mock.On("GetWithdrawLimits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OperationsAPIMock_GetWithdrawLimits_Call) Run(run func(ctx context.Context, in *contractv1.WithdrawLimitsRequest, opts ...grpc.CallOption)) *OperationsAPIMock_GetWithdrawLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.WithdrawLimitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *OperationsAPIMock_GetWithdrawLimits_Call) Return(_a0 *contractv1.WithdrawLimitsResponse, _a1 error) *OperationsAPIMock_GetWithdrawLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationsAPIMock_GetWithdrawLimits_Call) RunAndReturn(run func(context.Context, *contractv1.WithdrawLimitsRequest, ...grpc.CallOption) (*contractv1.WithdrawLimitsResponse, error)) *OperationsAPIMock_GetWithdrawLimits_Call {
	_c.Call.Return(run)
	return _c
}

// NewOperationsAPIMock creates a new instance of OperationsAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationsAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationsAPIMock {
	mock := &OperationsAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
