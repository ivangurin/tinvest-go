// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	contractv1 "tinvest-go/internal/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// OrdersAPIMock is an autogenerated mock type for the OrdersAPIMock type
type OrdersAPIMock struct {
	mock.Mock
}

type OrdersAPIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrdersAPIMock) EXPECT() *OrdersAPIMock_Expecter {
	return &OrdersAPIMock_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) CancelOrder(ctx context.Context, in *contractv1.CancelOrderRequest, opts ...grpc.CallOption) (*contractv1.CancelOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 *contractv1.CancelOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.CancelOrderRequest, ...grpc.CallOption) (*contractv1.CancelOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.CancelOrderRequest, ...grpc.CallOption) *contractv1.CancelOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.CancelOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.CancelOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type OrdersAPIMock_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.CancelOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) CancelOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_CancelOrder_Call {
	return &OrdersAPIMock_CancelOrder_Call{Call: _e.mock.On("CancelOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_CancelOrder_Call) Run(run func(ctx context.Context, in *contractv1.CancelOrderRequest, opts ...grpc.CallOption)) *OrdersAPIMock_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.CancelOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_CancelOrder_Call) Return(_a0 *contractv1.CancelOrderResponse, _a1 error) *OrdersAPIMock_CancelOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_CancelOrder_Call) RunAndReturn(run func(context.Context, *contractv1.CancelOrderRequest, ...grpc.CallOption) (*contractv1.CancelOrderResponse, error)) *OrdersAPIMock_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxLots provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) GetMaxLots(ctx context.Context, in *contractv1.GetMaxLotsRequest, opts ...grpc.CallOption) (*contractv1.GetMaxLotsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxLots")
	}

	var r0 *contractv1.GetMaxLotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetMaxLotsRequest, ...grpc.CallOption) (*contractv1.GetMaxLotsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetMaxLotsRequest, ...grpc.CallOption) *contractv1.GetMaxLotsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetMaxLotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetMaxLotsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_GetMaxLots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxLots'
type OrdersAPIMock_GetMaxLots_Call struct {
	*mock.Call
}

// GetMaxLots is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetMaxLotsRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) GetMaxLots(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_GetMaxLots_Call {
	return &OrdersAPIMock_GetMaxLots_Call{Call: _e.mock.On("GetMaxLots",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_GetMaxLots_Call) Run(run func(ctx context.Context, in *contractv1.GetMaxLotsRequest, opts ...grpc.CallOption)) *OrdersAPIMock_GetMaxLots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetMaxLotsRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_GetMaxLots_Call) Return(_a0 *contractv1.GetMaxLotsResponse, _a1 error) *OrdersAPIMock_GetMaxLots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_GetMaxLots_Call) RunAndReturn(run func(context.Context, *contractv1.GetMaxLotsRequest, ...grpc.CallOption) (*contractv1.GetMaxLotsResponse, error)) *OrdersAPIMock_GetMaxLots_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderPrice provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) GetOrderPrice(ctx context.Context, in *contractv1.GetOrderPriceRequest, opts ...grpc.CallOption) (*contractv1.GetOrderPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderPrice")
	}

	var r0 *contractv1.GetOrderPriceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrderPriceRequest, ...grpc.CallOption) (*contractv1.GetOrderPriceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrderPriceRequest, ...grpc.CallOption) *contractv1.GetOrderPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetOrderPriceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetOrderPriceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_GetOrderPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderPrice'
type OrdersAPIMock_GetOrderPrice_Call struct {
	*mock.Call
}

// GetOrderPrice is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetOrderPriceRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) GetOrderPrice(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_GetOrderPrice_Call {
	return &OrdersAPIMock_GetOrderPrice_Call{Call: _e.mock.On("GetOrderPrice",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_GetOrderPrice_Call) Run(run func(ctx context.Context, in *contractv1.GetOrderPriceRequest, opts ...grpc.CallOption)) *OrdersAPIMock_GetOrderPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetOrderPriceRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_GetOrderPrice_Call) Return(_a0 *contractv1.GetOrderPriceResponse, _a1 error) *OrdersAPIMock_GetOrderPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_GetOrderPrice_Call) RunAndReturn(run func(context.Context, *contractv1.GetOrderPriceRequest, ...grpc.CallOption) (*contractv1.GetOrderPriceResponse, error)) *OrdersAPIMock_GetOrderPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderState provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) GetOrderState(ctx context.Context, in *contractv1.GetOrderStateRequest, opts ...grpc.CallOption) (*contractv1.OrderState, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderState")
	}

	var r0 *contractv1.OrderState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrderStateRequest, ...grpc.CallOption) (*contractv1.OrderState, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrderStateRequest, ...grpc.CallOption) *contractv1.OrderState); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.OrderState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetOrderStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_GetOrderState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderState'
type OrdersAPIMock_GetOrderState_Call struct {
	*mock.Call
}

// GetOrderState is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetOrderStateRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) GetOrderState(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_GetOrderState_Call {
	return &OrdersAPIMock_GetOrderState_Call{Call: _e.mock.On("GetOrderState",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_GetOrderState_Call) Run(run func(ctx context.Context, in *contractv1.GetOrderStateRequest, opts ...grpc.CallOption)) *OrdersAPIMock_GetOrderState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetOrderStateRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_GetOrderState_Call) Return(_a0 *contractv1.OrderState, _a1 error) *OrdersAPIMock_GetOrderState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_GetOrderState_Call) RunAndReturn(run func(context.Context, *contractv1.GetOrderStateRequest, ...grpc.CallOption) (*contractv1.OrderState, error)) *OrdersAPIMock_GetOrderState_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) GetOrders(ctx context.Context, in *contractv1.GetOrdersRequest, opts ...grpc.CallOption) (*contractv1.GetOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 *contractv1.GetOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrdersRequest, ...grpc.CallOption) (*contractv1.GetOrdersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrdersRequest, ...grpc.CallOption) *contractv1.GetOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type OrdersAPIMock_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetOrdersRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) GetOrders(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_GetOrders_Call {
	return &OrdersAPIMock_GetOrders_Call{Call: _e.mock.On("GetOrders",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_GetOrders_Call) Run(run func(ctx context.Context, in *contractv1.GetOrdersRequest, opts ...grpc.CallOption)) *OrdersAPIMock_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetOrdersRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_GetOrders_Call) Return(_a0 *contractv1.GetOrdersResponse, _a1 error) *OrdersAPIMock_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_GetOrders_Call) RunAndReturn(run func(context.Context, *contractv1.GetOrdersRequest, ...grpc.CallOption) (*contractv1.GetOrdersResponse, error)) *OrdersAPIMock_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// PostOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) PostOrder(ctx context.Context, in *contractv1.PostOrderRequest, opts ...grpc.CallOption) (*contractv1.PostOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostOrder")
	}

	var r0 *contractv1.PostOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PostOrderRequest, ...grpc.CallOption) (*contractv1.PostOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PostOrderRequest, ...grpc.CallOption) *contractv1.PostOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.PostOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.PostOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_PostOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrder'
type OrdersAPIMock_PostOrder_Call struct {
	*mock.Call
}

// PostOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.PostOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) PostOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_PostOrder_Call {
	return &OrdersAPIMock_PostOrder_Call{Call: _e.mock.On("PostOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_PostOrder_Call) Run(run func(ctx context.Context, in *contractv1.PostOrderRequest, opts ...grpc.CallOption)) *OrdersAPIMock_PostOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.PostOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_PostOrder_Call) Return(_a0 *contractv1.PostOrderResponse, _a1 error) *OrdersAPIMock_PostOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_PostOrder_Call) RunAndReturn(run func(context.Context, *contractv1.PostOrderRequest, ...grpc.CallOption) (*contractv1.PostOrderResponse, error)) *OrdersAPIMock_PostOrder_Call {
	_c.Call.Return(run)
	return _c
}

// PostOrderAsync provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) PostOrderAsync(ctx context.Context, in *contractv1.PostOrderAsyncRequest, opts ...grpc.CallOption) (*contractv1.PostOrderAsyncResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostOrderAsync")
	}

	var r0 *contractv1.PostOrderAsyncResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PostOrderAsyncRequest, ...grpc.CallOption) (*contractv1.PostOrderAsyncResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.PostOrderAsyncRequest, ...grpc.CallOption) *contractv1.PostOrderAsyncResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.PostOrderAsyncResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.PostOrderAsyncRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_PostOrderAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrderAsync'
type OrdersAPIMock_PostOrderAsync_Call struct {
	*mock.Call
}

// PostOrderAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.PostOrderAsyncRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) PostOrderAsync(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_PostOrderAsync_Call {
	return &OrdersAPIMock_PostOrderAsync_Call{Call: _e.mock.On("PostOrderAsync",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_PostOrderAsync_Call) Run(run func(ctx context.Context, in *contractv1.PostOrderAsyncRequest, opts ...grpc.CallOption)) *OrdersAPIMock_PostOrderAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.PostOrderAsyncRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_PostOrderAsync_Call) Return(_a0 *contractv1.PostOrderAsyncResponse, _a1 error) *OrdersAPIMock_PostOrderAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_PostOrderAsync_Call) RunAndReturn(run func(context.Context, *contractv1.PostOrderAsyncRequest, ...grpc.CallOption) (*contractv1.PostOrderAsyncResponse, error)) *OrdersAPIMock_PostOrderAsync_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersAPIMock) ReplaceOrder(ctx context.Context, in *contractv1.ReplaceOrderRequest, opts ...grpc.CallOption) (*contractv1.PostOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceOrder")
	}

	var r0 *contractv1.PostOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.ReplaceOrderRequest, ...grpc.CallOption) (*contractv1.PostOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.ReplaceOrderRequest, ...grpc.CallOption) *contractv1.PostOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.PostOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.ReplaceOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersAPIMock_ReplaceOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceOrder'
type OrdersAPIMock_ReplaceOrder_Call struct {
	*mock.Call
}

// ReplaceOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.ReplaceOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrdersAPIMock_Expecter) ReplaceOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrdersAPIMock_ReplaceOrder_Call {
	return &OrdersAPIMock_ReplaceOrder_Call{Call: _e.mock.On("ReplaceOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersAPIMock_ReplaceOrder_Call) Run(run func(ctx context.Context, in *contractv1.ReplaceOrderRequest, opts ...grpc.CallOption)) *OrdersAPIMock_ReplaceOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.ReplaceOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrdersAPIMock_ReplaceOrder_Call) Return(_a0 *contractv1.PostOrderResponse, _a1 error) *OrdersAPIMock_ReplaceOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersAPIMock_ReplaceOrder_Call) RunAndReturn(run func(context.Context, *contractv1.ReplaceOrderRequest, ...grpc.CallOption) (*contractv1.PostOrderResponse, error)) *OrdersAPIMock_ReplaceOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrdersAPIMock creates a new instance of OrdersAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersAPIMock {
	mock := &OrdersAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
