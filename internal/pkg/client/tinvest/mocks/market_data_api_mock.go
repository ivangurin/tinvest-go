// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	contractv1 "tinvest-go/internal/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MarketDataAPIMock is an autogenerated mock type for the MarketDataAPIMock type
type MarketDataAPIMock struct {
	mock.Mock
}

type MarketDataAPIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MarketDataAPIMock) EXPECT() *MarketDataAPIMock_Expecter {
	return &MarketDataAPIMock_Expecter{mock: &_m.Mock}
}

// GetCandles provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetCandles(ctx context.Context, in *contractv1.GetCandlesRequest, opts ...grpc.CallOption) (*contractv1.GetCandlesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCandles")
	}

	var r0 *contractv1.GetCandlesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetCandlesRequest, ...grpc.CallOption) (*contractv1.GetCandlesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetCandlesRequest, ...grpc.CallOption) *contractv1.GetCandlesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetCandlesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetCandlesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetCandles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCandles'
type MarketDataAPIMock_GetCandles_Call struct {
	*mock.Call
}

// GetCandles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetCandlesRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetCandles(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetCandles_Call {
	return &MarketDataAPIMock_GetCandles_Call{Call: _e.mock.On("GetCandles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetCandles_Call) Run(run func(ctx context.Context, in *contractv1.GetCandlesRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetCandles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetCandlesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetCandles_Call) Return(_a0 *contractv1.GetCandlesResponse, _a1 error) *MarketDataAPIMock_GetCandles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetCandles_Call) RunAndReturn(run func(context.Context, *contractv1.GetCandlesRequest, ...grpc.CallOption) (*contractv1.GetCandlesResponse, error)) *MarketDataAPIMock_GetCandles_Call {
	_c.Call.Return(run)
	return _c
}

// GetClosePrices provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetClosePrices(ctx context.Context, in *contractv1.GetClosePricesRequest, opts ...grpc.CallOption) (*contractv1.GetClosePricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClosePrices")
	}

	var r0 *contractv1.GetClosePricesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetClosePricesRequest, ...grpc.CallOption) (*contractv1.GetClosePricesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetClosePricesRequest, ...grpc.CallOption) *contractv1.GetClosePricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetClosePricesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetClosePricesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetClosePrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClosePrices'
type MarketDataAPIMock_GetClosePrices_Call struct {
	*mock.Call
}

// GetClosePrices is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetClosePricesRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetClosePrices(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetClosePrices_Call {
	return &MarketDataAPIMock_GetClosePrices_Call{Call: _e.mock.On("GetClosePrices",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetClosePrices_Call) Run(run func(ctx context.Context, in *contractv1.GetClosePricesRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetClosePrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetClosePricesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetClosePrices_Call) Return(_a0 *contractv1.GetClosePricesResponse, _a1 error) *MarketDataAPIMock_GetClosePrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetClosePrices_Call) RunAndReturn(run func(context.Context, *contractv1.GetClosePricesRequest, ...grpc.CallOption) (*contractv1.GetClosePricesResponse, error)) *MarketDataAPIMock_GetClosePrices_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastPrices provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetLastPrices(ctx context.Context, in *contractv1.GetLastPricesRequest, opts ...grpc.CallOption) (*contractv1.GetLastPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLastPrices")
	}

	var r0 *contractv1.GetLastPricesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetLastPricesRequest, ...grpc.CallOption) (*contractv1.GetLastPricesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetLastPricesRequest, ...grpc.CallOption) *contractv1.GetLastPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetLastPricesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetLastPricesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetLastPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastPrices'
type MarketDataAPIMock_GetLastPrices_Call struct {
	*mock.Call
}

// GetLastPrices is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetLastPricesRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetLastPrices(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetLastPrices_Call {
	return &MarketDataAPIMock_GetLastPrices_Call{Call: _e.mock.On("GetLastPrices",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetLastPrices_Call) Run(run func(ctx context.Context, in *contractv1.GetLastPricesRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetLastPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetLastPricesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetLastPrices_Call) Return(_a0 *contractv1.GetLastPricesResponse, _a1 error) *MarketDataAPIMock_GetLastPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetLastPrices_Call) RunAndReturn(run func(context.Context, *contractv1.GetLastPricesRequest, ...grpc.CallOption) (*contractv1.GetLastPricesResponse, error)) *MarketDataAPIMock_GetLastPrices_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastTrades provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetLastTrades(ctx context.Context, in *contractv1.GetLastTradesRequest, opts ...grpc.CallOption) (*contractv1.GetLastTradesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLastTrades")
	}

	var r0 *contractv1.GetLastTradesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetLastTradesRequest, ...grpc.CallOption) (*contractv1.GetLastTradesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetLastTradesRequest, ...grpc.CallOption) *contractv1.GetLastTradesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetLastTradesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetLastTradesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetLastTrades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastTrades'
type MarketDataAPIMock_GetLastTrades_Call struct {
	*mock.Call
}

// GetLastTrades is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetLastTradesRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetLastTrades(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetLastTrades_Call {
	return &MarketDataAPIMock_GetLastTrades_Call{Call: _e.mock.On("GetLastTrades",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetLastTrades_Call) Run(run func(ctx context.Context, in *contractv1.GetLastTradesRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetLastTrades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetLastTradesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetLastTrades_Call) Return(_a0 *contractv1.GetLastTradesResponse, _a1 error) *MarketDataAPIMock_GetLastTrades_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetLastTrades_Call) RunAndReturn(run func(context.Context, *contractv1.GetLastTradesRequest, ...grpc.CallOption) (*contractv1.GetLastTradesResponse, error)) *MarketDataAPIMock_GetLastTrades_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderBook provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetOrderBook(ctx context.Context, in *contractv1.GetOrderBookRequest, opts ...grpc.CallOption) (*contractv1.GetOrderBookResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *contractv1.GetOrderBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrderBookRequest, ...grpc.CallOption) (*contractv1.GetOrderBookResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetOrderBookRequest, ...grpc.CallOption) *contractv1.GetOrderBookResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetOrderBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetOrderBookRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetOrderBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderBook'
type MarketDataAPIMock_GetOrderBook_Call struct {
	*mock.Call
}

// GetOrderBook is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetOrderBookRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetOrderBook(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetOrderBook_Call {
	return &MarketDataAPIMock_GetOrderBook_Call{Call: _e.mock.On("GetOrderBook",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetOrderBook_Call) Run(run func(ctx context.Context, in *contractv1.GetOrderBookRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetOrderBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetOrderBookRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetOrderBook_Call) Return(_a0 *contractv1.GetOrderBookResponse, _a1 error) *MarketDataAPIMock_GetOrderBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetOrderBook_Call) RunAndReturn(run func(context.Context, *contractv1.GetOrderBookRequest, ...grpc.CallOption) (*contractv1.GetOrderBookResponse, error)) *MarketDataAPIMock_GetOrderBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetTechAnalysis provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetTechAnalysis(ctx context.Context, in *contractv1.GetTechAnalysisRequest, opts ...grpc.CallOption) (*contractv1.GetTechAnalysisResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTechAnalysis")
	}

	var r0 *contractv1.GetTechAnalysisResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetTechAnalysisRequest, ...grpc.CallOption) (*contractv1.GetTechAnalysisResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetTechAnalysisRequest, ...grpc.CallOption) *contractv1.GetTechAnalysisResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetTechAnalysisResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetTechAnalysisRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetTechAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTechAnalysis'
type MarketDataAPIMock_GetTechAnalysis_Call struct {
	*mock.Call
}

// GetTechAnalysis is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetTechAnalysisRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetTechAnalysis(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetTechAnalysis_Call {
	return &MarketDataAPIMock_GetTechAnalysis_Call{Call: _e.mock.On("GetTechAnalysis",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetTechAnalysis_Call) Run(run func(ctx context.Context, in *contractv1.GetTechAnalysisRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetTechAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetTechAnalysisRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetTechAnalysis_Call) Return(_a0 *contractv1.GetTechAnalysisResponse, _a1 error) *MarketDataAPIMock_GetTechAnalysis_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetTechAnalysis_Call) RunAndReturn(run func(context.Context, *contractv1.GetTechAnalysisRequest, ...grpc.CallOption) (*contractv1.GetTechAnalysisResponse, error)) *MarketDataAPIMock_GetTechAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// GetTradingStatus provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetTradingStatus(ctx context.Context, in *contractv1.GetTradingStatusRequest, opts ...grpc.CallOption) (*contractv1.GetTradingStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTradingStatus")
	}

	var r0 *contractv1.GetTradingStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetTradingStatusRequest, ...grpc.CallOption) (*contractv1.GetTradingStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetTradingStatusRequest, ...grpc.CallOption) *contractv1.GetTradingStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetTradingStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetTradingStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetTradingStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTradingStatus'
type MarketDataAPIMock_GetTradingStatus_Call struct {
	*mock.Call
}

// GetTradingStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetTradingStatusRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetTradingStatus(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetTradingStatus_Call {
	return &MarketDataAPIMock_GetTradingStatus_Call{Call: _e.mock.On("GetTradingStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetTradingStatus_Call) Run(run func(ctx context.Context, in *contractv1.GetTradingStatusRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetTradingStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetTradingStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetTradingStatus_Call) Return(_a0 *contractv1.GetTradingStatusResponse, _a1 error) *MarketDataAPIMock_GetTradingStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetTradingStatus_Call) RunAndReturn(run func(context.Context, *contractv1.GetTradingStatusRequest, ...grpc.CallOption) (*contractv1.GetTradingStatusResponse, error)) *MarketDataAPIMock_GetTradingStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetTradingStatuses provides a mock function with given fields: ctx, in, opts
func (_m *MarketDataAPIMock) GetTradingStatuses(ctx context.Context, in *contractv1.GetTradingStatusesRequest, opts ...grpc.CallOption) (*contractv1.GetTradingStatusesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTradingStatuses")
	}

	var r0 *contractv1.GetTradingStatusesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetTradingStatusesRequest, ...grpc.CallOption) (*contractv1.GetTradingStatusesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contractv1.GetTradingStatusesRequest, ...grpc.CallOption) *contractv1.GetTradingStatusesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractv1.GetTradingStatusesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contractv1.GetTradingStatusesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketDataAPIMock_GetTradingStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTradingStatuses'
type MarketDataAPIMock_GetTradingStatuses_Call struct {
	*mock.Call
}

// GetTradingStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - in *contractv1.GetTradingStatusesRequest
//   - opts ...grpc.CallOption
func (_e *MarketDataAPIMock_Expecter) GetTradingStatuses(ctx interface{}, in interface{}, opts ...interface{}) *MarketDataAPIMock_GetTradingStatuses_Call {
	return &MarketDataAPIMock_GetTradingStatuses_Call{Call: _e.mock.On("GetTradingStatuses",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MarketDataAPIMock_GetTradingStatuses_Call) Run(run func(ctx context.Context, in *contractv1.GetTradingStatusesRequest, opts ...grpc.CallOption)) *MarketDataAPIMock_GetTradingStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*contractv1.GetTradingStatusesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MarketDataAPIMock_GetTradingStatuses_Call) Return(_a0 *contractv1.GetTradingStatusesResponse, _a1 error) *MarketDataAPIMock_GetTradingStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MarketDataAPIMock_GetTradingStatuses_Call) RunAndReturn(run func(context.Context, *contractv1.GetTradingStatusesRequest, ...grpc.CallOption) (*contractv1.GetTradingStatusesResponse, error)) *MarketDataAPIMock_GetTradingStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// NewMarketDataAPIMock creates a new instance of MarketDataAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketDataAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketDataAPIMock {
	mock := &MarketDataAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
