// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// ClientMock is an autogenerated mock type for the ClientMock type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *ClientMock) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ClientMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ClientMock_Expecter) Close() *ClientMock_Close_Call {
	return &ClientMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ClientMock_Close_Call) Run(run func()) *ClientMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_Close_Call) Return(_a0 error) *ClientMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_Close_Call) RunAndReturn(run func() error) *ClientMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessage provides a mock function with given fields: ctx, chatID, messageID
func (_m *ClientMock) DeleteMessage(ctx context.Context, chatID int64, messageID int) error {
	ret := _m.Called(ctx, chatID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, chatID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type ClientMock_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - messageID int
func (_e *ClientMock_Expecter) DeleteMessage(ctx interface{}, chatID interface{}, messageID interface{}) *ClientMock_DeleteMessage_Call {
	return &ClientMock_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage", ctx, chatID, messageID)}
}

func (_c *ClientMock_DeleteMessage_Call) Run(run func(ctx context.Context, chatID int64, messageID int)) *ClientMock_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *ClientMock_DeleteMessage_Call) Return(_a0 error) *ClientMock_DeleteMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DeleteMessage_Call) RunAndReturn(run func(context.Context, int64, int) error) *ClientMock_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdatesChan provides a mock function with no fields
func (_m *ClientMock) GetUpdatesChan() tgbotapi.UpdatesChannel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatesChan")
	}

	var r0 tgbotapi.UpdatesChannel
	if rf, ok := ret.Get(0).(func() tgbotapi.UpdatesChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tgbotapi.UpdatesChannel)
		}
	}

	return r0
}

// ClientMock_GetUpdatesChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatesChan'
type ClientMock_GetUpdatesChan_Call struct {
	*mock.Call
}

// GetUpdatesChan is a helper method to define mock.On call
func (_e *ClientMock_Expecter) GetUpdatesChan() *ClientMock_GetUpdatesChan_Call {
	return &ClientMock_GetUpdatesChan_Call{Call: _e.mock.On("GetUpdatesChan")}
}

func (_c *ClientMock_GetUpdatesChan_Call) Run(run func()) *ClientMock_GetUpdatesChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_GetUpdatesChan_Call) Return(_a0 tgbotapi.UpdatesChannel) *ClientMock_GetUpdatesChan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_GetUpdatesChan_Call) RunAndReturn(run func() tgbotapi.UpdatesChannel) *ClientMock_GetUpdatesChan_Call {
	_c.Call.Return(run)
	return _c
}

// SendCallback provides a mock function with given fields: ctx, callbackQueryID
func (_m *ClientMock) SendCallback(ctx context.Context, callbackQueryID string) error {
	ret := _m.Called(ctx, callbackQueryID)

	if len(ret) == 0 {
		panic("no return value specified for SendCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, callbackQueryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_SendCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCallback'
type ClientMock_SendCallback_Call struct {
	*mock.Call
}

// SendCallback is a helper method to define mock.On call
//   - ctx context.Context
//   - callbackQueryID string
func (_e *ClientMock_Expecter) SendCallback(ctx interface{}, callbackQueryID interface{}) *ClientMock_SendCallback_Call {
	return &ClientMock_SendCallback_Call{Call: _e.mock.On("SendCallback", ctx, callbackQueryID)}
}

func (_c *ClientMock_SendCallback_Call) Run(run func(ctx context.Context, callbackQueryID string)) *ClientMock_SendCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_SendCallback_Call) Return(_a0 error) *ClientMock_SendCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_SendCallback_Call) RunAndReturn(run func(context.Context, string) error) *ClientMock_SendCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, messageConfig
func (_m *ClientMock) SendMessage(ctx context.Context, messageConfig *tgbotapi.MessageConfig) (int, error) {
	ret := _m.Called(ctx, messageConfig)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tgbotapi.MessageConfig) (int, error)); ok {
		return rf(ctx, messageConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tgbotapi.MessageConfig) int); ok {
		r0 = rf(ctx, messageConfig)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tgbotapi.MessageConfig) error); ok {
		r1 = rf(ctx, messageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type ClientMock_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - messageConfig *tgbotapi.MessageConfig
func (_e *ClientMock_Expecter) SendMessage(ctx interface{}, messageConfig interface{}) *ClientMock_SendMessage_Call {
	return &ClientMock_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, messageConfig)}
}

func (_c *ClientMock_SendMessage_Call) Run(run func(ctx context.Context, messageConfig *tgbotapi.MessageConfig)) *ClientMock_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*tgbotapi.MessageConfig))
	})
	return _c
}

func (_c *ClientMock_SendMessage_Call) Return(_a0 int, _a1 error) *ClientMock_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_SendMessage_Call) RunAndReturn(run func(context.Context, *tgbotapi.MessageConfig) (int, error)) *ClientMock_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessageWithText provides a mock function with given fields: ctx, chatID, text
func (_m *ClientMock) SendMessageWithText(ctx context.Context, chatID int64, text string) (int, error) {
	ret := _m.Called(ctx, chatID, text)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageWithText")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (int, error)); ok {
		return rf(ctx, chatID, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) int); ok {
		r0 = rf(ctx, chatID, text)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, chatID, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_SendMessageWithText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessageWithText'
type ClientMock_SendMessageWithText_Call struct {
	*mock.Call
}

// SendMessageWithText is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - text string
func (_e *ClientMock_Expecter) SendMessageWithText(ctx interface{}, chatID interface{}, text interface{}) *ClientMock_SendMessageWithText_Call {
	return &ClientMock_SendMessageWithText_Call{Call: _e.mock.On("SendMessageWithText", ctx, chatID, text)}
}

func (_c *ClientMock_SendMessageWithText_Call) Run(run func(ctx context.Context, chatID int64, text string)) *ClientMock_SendMessageWithText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *ClientMock_SendMessageWithText_Call) Return(_a0 int, _a1 error) *ClientMock_SendMessageWithText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_SendMessageWithText_Call) RunAndReturn(run func(context.Context, int64, string) (int, error)) *ClientMock_SendMessageWithText_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
