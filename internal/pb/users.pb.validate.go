// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: users.proto

package contractv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsRequestMultiError, or nil if none found.
func (m *GetAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return GetAccountsRequestMultiError(errors)
	}

	return nil
}

// GetAccountsRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsRequestMultiError) AllErrors() []error { return m }

// GetAccountsRequestValidationError is the validation error returned by
// GetAccountsRequest.Validate if the designated constraints aren't met.
type GetAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsRequestValidationError) ErrorName() string {
	return "GetAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsRequestValidationError{}

// Validate checks the field values on GetAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsResponseMultiError, or nil if none found.
func (m *GetAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountsResponseMultiError(errors)
	}

	return nil
}

// GetAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsResponseMultiError) AllErrors() []error { return m }

// GetAccountsResponseValidationError is the validation error returned by
// GetAccountsResponse.Validate if the designated constraints aren't met.
type GetAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsResponseValidationError) ErrorName() string {
	return "GetAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsResponseValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetOpenedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountValidationError{
					field:  "OpenedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountValidationError{
					field:  "OpenedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpenedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountValidationError{
				field:  "OpenedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClosedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountValidationError{
					field:  "ClosedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountValidationError{
					field:  "ClosedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClosedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountValidationError{
				field:  "ClosedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessLevel

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on GetMarginAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMarginAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMarginAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMarginAttributesRequestMultiError, or nil if none found.
func (m *GetMarginAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMarginAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetMarginAttributesRequestMultiError(errors)
	}

	return nil
}

// GetMarginAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by GetMarginAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetMarginAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMarginAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMarginAttributesRequestMultiError) AllErrors() []error { return m }

// GetMarginAttributesRequestValidationError is the validation error returned
// by GetMarginAttributesRequest.Validate if the designated constraints aren't met.
type GetMarginAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMarginAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMarginAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMarginAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMarginAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMarginAttributesRequestValidationError) ErrorName() string {
	return "GetMarginAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMarginAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMarginAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMarginAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMarginAttributesRequestValidationError{}

// Validate checks the field values on GetMarginAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMarginAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMarginAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMarginAttributesResponseMultiError, or nil if none found.
func (m *GetMarginAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMarginAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLiquidPortfolio()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "LiquidPortfolio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "LiquidPortfolio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiquidPortfolio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarginAttributesResponseValidationError{
				field:  "LiquidPortfolio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartingMargin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "StartingMargin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "StartingMargin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartingMargin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarginAttributesResponseValidationError{
				field:  "StartingMargin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinimalMargin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "MinimalMargin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "MinimalMargin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinimalMargin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarginAttributesResponseValidationError{
				field:  "MinimalMargin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFundsSufficiencyLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "FundsSufficiencyLevel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "FundsSufficiencyLevel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFundsSufficiencyLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarginAttributesResponseValidationError{
				field:  "FundsSufficiencyLevel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmountOfMissingFunds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "AmountOfMissingFunds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "AmountOfMissingFunds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmountOfMissingFunds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarginAttributesResponseValidationError{
				field:  "AmountOfMissingFunds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCorrectedMargin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "CorrectedMargin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarginAttributesResponseValidationError{
					field:  "CorrectedMargin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrectedMargin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarginAttributesResponseValidationError{
				field:  "CorrectedMargin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMarginAttributesResponseMultiError(errors)
	}

	return nil
}

// GetMarginAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by GetMarginAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMarginAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMarginAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMarginAttributesResponseMultiError) AllErrors() []error { return m }

// GetMarginAttributesResponseValidationError is the validation error returned
// by GetMarginAttributesResponse.Validate if the designated constraints
// aren't met.
type GetMarginAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMarginAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMarginAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMarginAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMarginAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMarginAttributesResponseValidationError) ErrorName() string {
	return "GetMarginAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMarginAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMarginAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMarginAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMarginAttributesResponseValidationError{}

// Validate checks the field values on GetUserTariffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTariffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTariffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTariffRequestMultiError, or nil if none found.
func (m *GetUserTariffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTariffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTariffRequestMultiError(errors)
	}

	return nil
}

// GetUserTariffRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserTariffRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserTariffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTariffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTariffRequestMultiError) AllErrors() []error { return m }

// GetUserTariffRequestValidationError is the validation error returned by
// GetUserTariffRequest.Validate if the designated constraints aren't met.
type GetUserTariffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTariffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTariffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTariffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTariffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTariffRequestValidationError) ErrorName() string {
	return "GetUserTariffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTariffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTariffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTariffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTariffRequestValidationError{}

// Validate checks the field values on GetUserTariffResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTariffResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTariffResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTariffResponseMultiError, or nil if none found.
func (m *GetUserTariffResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTariffResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnaryLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserTariffResponseValidationError{
						field:  fmt.Sprintf("UnaryLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserTariffResponseValidationError{
						field:  fmt.Sprintf("UnaryLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserTariffResponseValidationError{
					field:  fmt.Sprintf("UnaryLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStreamLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserTariffResponseValidationError{
						field:  fmt.Sprintf("StreamLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserTariffResponseValidationError{
						field:  fmt.Sprintf("StreamLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserTariffResponseValidationError{
					field:  fmt.Sprintf("StreamLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserTariffResponseMultiError(errors)
	}

	return nil
}

// GetUserTariffResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTariffResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTariffResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTariffResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTariffResponseMultiError) AllErrors() []error { return m }

// GetUserTariffResponseValidationError is the validation error returned by
// GetUserTariffResponse.Validate if the designated constraints aren't met.
type GetUserTariffResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTariffResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTariffResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTariffResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTariffResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTariffResponseValidationError) ErrorName() string {
	return "GetUserTariffResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTariffResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTariffResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTariffResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTariffResponseValidationError{}

// Validate checks the field values on UnaryLimit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnaryLimit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnaryLimit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnaryLimitMultiError, or
// nil if none found.
func (m *UnaryLimit) ValidateAll() error {
	return m.validate(true)
}

func (m *UnaryLimit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LimitPerMinute

	if len(errors) > 0 {
		return UnaryLimitMultiError(errors)
	}

	return nil
}

// UnaryLimitMultiError is an error wrapping multiple validation errors
// returned by UnaryLimit.ValidateAll() if the designated constraints aren't met.
type UnaryLimitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnaryLimitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnaryLimitMultiError) AllErrors() []error { return m }

// UnaryLimitValidationError is the validation error returned by
// UnaryLimit.Validate if the designated constraints aren't met.
type UnaryLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnaryLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnaryLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnaryLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnaryLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnaryLimitValidationError) ErrorName() string { return "UnaryLimitValidationError" }

// Error satisfies the builtin error interface
func (e UnaryLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnaryLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnaryLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnaryLimitValidationError{}

// Validate checks the field values on StreamLimit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamLimit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamLimit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamLimitMultiError, or
// nil if none found.
func (m *StreamLimit) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamLimit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Open

	if len(errors) > 0 {
		return StreamLimitMultiError(errors)
	}

	return nil
}

// StreamLimitMultiError is an error wrapping multiple validation errors
// returned by StreamLimit.ValidateAll() if the designated constraints aren't met.
type StreamLimitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamLimitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamLimitMultiError) AllErrors() []error { return m }

// StreamLimitValidationError is the validation error returned by
// StreamLimit.Validate if the designated constraints aren't met.
type StreamLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamLimitValidationError) ErrorName() string { return "StreamLimitValidationError" }

// Error satisfies the builtin error interface
func (e StreamLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamLimitValidationError{}

// Validate checks the field values on GetInfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetInfoRequestMultiError,
// or nil if none found.
func (m *GetInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInfoRequestMultiError(errors)
	}

	return nil
}

// GetInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInfoRequestMultiError) AllErrors() []error { return m }

// GetInfoRequestValidationError is the validation error returned by
// GetInfoRequest.Validate if the designated constraints aren't met.
type GetInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoRequestValidationError) ErrorName() string { return "GetInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoRequestValidationError{}

// Validate checks the field values on GetInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInfoResponseMultiError, or nil if none found.
func (m *GetInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PremStatus

	// no validation rules for QualStatus

	// no validation rules for Tariff

	if len(errors) > 0 {
		return GetInfoResponseMultiError(errors)
	}

	return nil
}

// GetInfoResponseMultiError is an error wrapping multiple validation errors
// returned by GetInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type GetInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInfoResponseMultiError) AllErrors() []error { return m }

// GetInfoResponseValidationError is the validation error returned by
// GetInfoResponse.Validate if the designated constraints aren't met.
type GetInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoResponseValidationError) ErrorName() string { return "GetInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoResponseValidationError{}
