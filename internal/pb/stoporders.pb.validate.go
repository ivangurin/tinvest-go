// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stoporders.proto

package contractv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PostStopOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostStopOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostStopOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostStopOrderRequestMultiError, or nil if none found.
func (m *PostStopOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostStopOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Quantity

	// no validation rules for Direction

	// no validation rules for AccountId

	// no validation rules for ExpirationType

	// no validation rules for StopOrderType

	// no validation rules for InstrumentId

	// no validation rules for ExchangeOrderType

	// no validation rules for TakeProfitType

	if all {
		switch v := interface{}(m.GetTrailingData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostStopOrderRequestValidationError{
					field:  "TrailingData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostStopOrderRequestValidationError{
					field:  "TrailingData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrailingData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostStopOrderRequestValidationError{
				field:  "TrailingData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PriceType

	// no validation rules for OrderId

	if m.Figi != nil {
		// no validation rules for Figi
	}

	if m.Price != nil {

		if all {
			switch v := interface{}(m.GetPrice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostStopOrderRequestValidationError{
						field:  "Price",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostStopOrderRequestValidationError{
						field:  "Price",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostStopOrderRequestValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StopPrice != nil {

		if all {
			switch v := interface{}(m.GetStopPrice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostStopOrderRequestValidationError{
						field:  "StopPrice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostStopOrderRequestValidationError{
						field:  "StopPrice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopPrice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostStopOrderRequestValidationError{
					field:  "StopPrice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExpireDate != nil {

		if all {
			switch v := interface{}(m.GetExpireDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostStopOrderRequestValidationError{
						field:  "ExpireDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostStopOrderRequestValidationError{
						field:  "ExpireDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpireDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostStopOrderRequestValidationError{
					field:  "ExpireDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PostStopOrderRequestMultiError(errors)
	}

	return nil
}

// PostStopOrderRequestMultiError is an error wrapping multiple validation
// errors returned by PostStopOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type PostStopOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostStopOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostStopOrderRequestMultiError) AllErrors() []error { return m }

// PostStopOrderRequestValidationError is the validation error returned by
// PostStopOrderRequest.Validate if the designated constraints aren't met.
type PostStopOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostStopOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostStopOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostStopOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostStopOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostStopOrderRequestValidationError) ErrorName() string {
	return "PostStopOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostStopOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostStopOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostStopOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostStopOrderRequestValidationError{}

// Validate checks the field values on PostStopOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostStopOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostStopOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostStopOrderResponseMultiError, or nil if none found.
func (m *PostStopOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostStopOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StopOrderId

	// no validation rules for OrderRequestId

	if all {
		switch v := interface{}(m.GetResponseMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostStopOrderResponseValidationError{
					field:  "ResponseMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostStopOrderResponseValidationError{
					field:  "ResponseMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostStopOrderResponseValidationError{
				field:  "ResponseMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostStopOrderResponseMultiError(errors)
	}

	return nil
}

// PostStopOrderResponseMultiError is an error wrapping multiple validation
// errors returned by PostStopOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type PostStopOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostStopOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostStopOrderResponseMultiError) AllErrors() []error { return m }

// PostStopOrderResponseValidationError is the validation error returned by
// PostStopOrderResponse.Validate if the designated constraints aren't met.
type PostStopOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostStopOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostStopOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostStopOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostStopOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostStopOrderResponseValidationError) ErrorName() string {
	return "PostStopOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostStopOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostStopOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostStopOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostStopOrderResponseValidationError{}

// Validate checks the field values on GetStopOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStopOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStopOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStopOrdersRequestMultiError, or nil if none found.
func (m *GetStopOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStopOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStopOrdersRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStopOrdersRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStopOrdersRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStopOrdersRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStopOrdersRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStopOrdersRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStopOrdersRequestMultiError(errors)
	}

	return nil
}

// GetStopOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by GetStopOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStopOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStopOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStopOrdersRequestMultiError) AllErrors() []error { return m }

// GetStopOrdersRequestValidationError is the validation error returned by
// GetStopOrdersRequest.Validate if the designated constraints aren't met.
type GetStopOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStopOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStopOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStopOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStopOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStopOrdersRequestValidationError) ErrorName() string {
	return "GetStopOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStopOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStopOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStopOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStopOrdersRequestValidationError{}

// Validate checks the field values on GetStopOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStopOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStopOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStopOrdersResponseMultiError, or nil if none found.
func (m *GetStopOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStopOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStopOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStopOrdersResponseValidationError{
						field:  fmt.Sprintf("StopOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStopOrdersResponseValidationError{
						field:  fmt.Sprintf("StopOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStopOrdersResponseValidationError{
					field:  fmt.Sprintf("StopOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStopOrdersResponseMultiError(errors)
	}

	return nil
}

// GetStopOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by GetStopOrdersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStopOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStopOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStopOrdersResponseMultiError) AllErrors() []error { return m }

// GetStopOrdersResponseValidationError is the validation error returned by
// GetStopOrdersResponse.Validate if the designated constraints aren't met.
type GetStopOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStopOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStopOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStopOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStopOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStopOrdersResponseValidationError) ErrorName() string {
	return "GetStopOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStopOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStopOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStopOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStopOrdersResponseValidationError{}

// Validate checks the field values on CancelStopOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelStopOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelStopOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelStopOrderRequestMultiError, or nil if none found.
func (m *CancelStopOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelStopOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for StopOrderId

	if len(errors) > 0 {
		return CancelStopOrderRequestMultiError(errors)
	}

	return nil
}

// CancelStopOrderRequestMultiError is an error wrapping multiple validation
// errors returned by CancelStopOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelStopOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelStopOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelStopOrderRequestMultiError) AllErrors() []error { return m }

// CancelStopOrderRequestValidationError is the validation error returned by
// CancelStopOrderRequest.Validate if the designated constraints aren't met.
type CancelStopOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelStopOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelStopOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelStopOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelStopOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelStopOrderRequestValidationError) ErrorName() string {
	return "CancelStopOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelStopOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelStopOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelStopOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelStopOrderRequestValidationError{}

// Validate checks the field values on CancelStopOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelStopOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelStopOrderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelStopOrderResponseMultiError, or nil if none found.
func (m *CancelStopOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelStopOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelStopOrderResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelStopOrderResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelStopOrderResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelStopOrderResponseMultiError(errors)
	}

	return nil
}

// CancelStopOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CancelStopOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelStopOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelStopOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelStopOrderResponseMultiError) AllErrors() []error { return m }

// CancelStopOrderResponseValidationError is the validation error returned by
// CancelStopOrderResponse.Validate if the designated constraints aren't met.
type CancelStopOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelStopOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelStopOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelStopOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelStopOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelStopOrderResponseValidationError) ErrorName() string {
	return "CancelStopOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelStopOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelStopOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelStopOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelStopOrderResponseValidationError{}

// Validate checks the field values on StopOrder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StopOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StopOrderMultiError, or nil
// if none found.
func (m *StopOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *StopOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StopOrderId

	// no validation rules for LotsRequested

	// no validation rules for Figi

	// no validation rules for Direction

	// no validation rules for Currency

	// no validation rules for OrderType

	if all {
		switch v := interface{}(m.GetCreateDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "CreateDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "CreateDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrderValidationError{
				field:  "CreateDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActivationDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "ActivationDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "ActivationDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivationDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrderValidationError{
				field:  "ActivationDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpirationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "ExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "ExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrderValidationError{
				field:  "ExpirationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrderValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStopPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "StopPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "StopPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStopPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrderValidationError{
				field:  "StopPrice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstrumentUid

	// no validation rules for TakeProfitType

	if all {
		switch v := interface{}(m.GetTrailingData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "TrailingData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrderValidationError{
					field:  "TrailingData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrailingData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrderValidationError{
				field:  "TrailingData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for ExchangeOrderType

	if m.ExchangeOrderId != nil {
		// no validation rules for ExchangeOrderId
	}

	if len(errors) > 0 {
		return StopOrderMultiError(errors)
	}

	return nil
}

// StopOrderMultiError is an error wrapping multiple validation errors returned
// by StopOrder.ValidateAll() if the designated constraints aren't met.
type StopOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopOrderMultiError) AllErrors() []error { return m }

// StopOrderValidationError is the validation error returned by
// StopOrder.Validate if the designated constraints aren't met.
type StopOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopOrderValidationError) ErrorName() string { return "StopOrderValidationError" }

// Error satisfies the builtin error interface
func (e StopOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopOrderValidationError{}

// Validate checks the field values on PostStopOrderRequest_TrailingData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PostStopOrderRequest_TrailingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostStopOrderRequest_TrailingData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PostStopOrderRequest_TrailingDataMultiError, or nil if none found.
func (m *PostStopOrderRequest_TrailingData) ValidateAll() error {
	return m.validate(true)
}

func (m *PostStopOrderRequest_TrailingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostStopOrderRequest_TrailingDataValidationError{
					field:  "Indent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostStopOrderRequest_TrailingDataValidationError{
					field:  "Indent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostStopOrderRequest_TrailingDataValidationError{
				field:  "Indent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IndentType

	if all {
		switch v := interface{}(m.GetSpread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostStopOrderRequest_TrailingDataValidationError{
					field:  "Spread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostStopOrderRequest_TrailingDataValidationError{
					field:  "Spread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostStopOrderRequest_TrailingDataValidationError{
				field:  "Spread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SpreadType

	if len(errors) > 0 {
		return PostStopOrderRequest_TrailingDataMultiError(errors)
	}

	return nil
}

// PostStopOrderRequest_TrailingDataMultiError is an error wrapping multiple
// validation errors returned by
// PostStopOrderRequest_TrailingData.ValidateAll() if the designated
// constraints aren't met.
type PostStopOrderRequest_TrailingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostStopOrderRequest_TrailingDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostStopOrderRequest_TrailingDataMultiError) AllErrors() []error { return m }

// PostStopOrderRequest_TrailingDataValidationError is the validation error
// returned by PostStopOrderRequest_TrailingData.Validate if the designated
// constraints aren't met.
type PostStopOrderRequest_TrailingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostStopOrderRequest_TrailingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostStopOrderRequest_TrailingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostStopOrderRequest_TrailingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostStopOrderRequest_TrailingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostStopOrderRequest_TrailingDataValidationError) ErrorName() string {
	return "PostStopOrderRequest_TrailingDataValidationError"
}

// Error satisfies the builtin error interface
func (e PostStopOrderRequest_TrailingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostStopOrderRequest_TrailingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostStopOrderRequest_TrailingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostStopOrderRequest_TrailingDataValidationError{}

// Validate checks the field values on StopOrder_TrailingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopOrder_TrailingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopOrder_TrailingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopOrder_TrailingDataMultiError, or nil if none found.
func (m *StopOrder_TrailingData) ValidateAll() error {
	return m.validate(true)
}

func (m *StopOrder_TrailingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Indent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Indent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrder_TrailingDataValidationError{
				field:  "Indent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IndentType

	if all {
		switch v := interface{}(m.GetSpread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Spread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Spread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrder_TrailingDataValidationError{
				field:  "Spread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SpreadType

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrder_TrailingDataValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Extr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopOrder_TrailingDataValidationError{
					field:  "Extr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopOrder_TrailingDataValidationError{
				field:  "Extr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StopOrder_TrailingDataMultiError(errors)
	}

	return nil
}

// StopOrder_TrailingDataMultiError is an error wrapping multiple validation
// errors returned by StopOrder_TrailingData.ValidateAll() if the designated
// constraints aren't met.
type StopOrder_TrailingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopOrder_TrailingDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopOrder_TrailingDataMultiError) AllErrors() []error { return m }

// StopOrder_TrailingDataValidationError is the validation error returned by
// StopOrder_TrailingData.Validate if the designated constraints aren't met.
type StopOrder_TrailingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopOrder_TrailingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopOrder_TrailingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopOrder_TrailingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopOrder_TrailingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopOrder_TrailingDataValidationError) ErrorName() string {
	return "StopOrder_TrailingDataValidationError"
}

// Error satisfies the builtin error interface
func (e StopOrder_TrailingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopOrder_TrailingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopOrder_TrailingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopOrder_TrailingDataValidationError{}
