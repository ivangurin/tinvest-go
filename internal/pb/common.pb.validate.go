// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package contractv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MoneyValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoneyValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoneyValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoneyValueMultiError, or
// nil if none found.
func (m *MoneyValue) ValidateAll() error {
	return m.validate(true)
}

func (m *MoneyValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Units

	// no validation rules for Nano

	if len(errors) > 0 {
		return MoneyValueMultiError(errors)
	}

	return nil
}

// MoneyValueMultiError is an error wrapping multiple validation errors
// returned by MoneyValue.ValidateAll() if the designated constraints aren't met.
type MoneyValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoneyValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoneyValueMultiError) AllErrors() []error { return m }

// MoneyValueValidationError is the validation error returned by
// MoneyValue.Validate if the designated constraints aren't met.
type MoneyValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoneyValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoneyValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoneyValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoneyValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoneyValueValidationError) ErrorName() string { return "MoneyValueValidationError" }

// Error satisfies the builtin error interface
func (e MoneyValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoneyValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoneyValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoneyValueValidationError{}

// Validate checks the field values on Quotation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quotation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quotation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotationMultiError, or nil
// if none found.
func (m *Quotation) ValidateAll() error {
	return m.validate(true)
}

func (m *Quotation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Units

	// no validation rules for Nano

	if len(errors) > 0 {
		return QuotationMultiError(errors)
	}

	return nil
}

// QuotationMultiError is an error wrapping multiple validation errors returned
// by Quotation.ValidateAll() if the designated constraints aren't met.
type QuotationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotationMultiError) AllErrors() []error { return m }

// QuotationValidationError is the validation error returned by
// Quotation.Validate if the designated constraints aren't met.
type QuotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotationValidationError) ErrorName() string { return "QuotationValidationError" }

// Error satisfies the builtin error interface
func (e QuotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotationValidationError{}

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Time != nil {

		if all {
			switch v := interface{}(m.GetTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PingRequestValidationError{
						field:  "Time",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PingRequestValidationError{
						field:  "Time",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingDelaySettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingDelaySettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingDelaySettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingDelaySettingsMultiError, or nil if none found.
func (m *PingDelaySettings) ValidateAll() error {
	return m.validate(true)
}

func (m *PingDelaySettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PingDelayMs != nil {
		// no validation rules for PingDelayMs
	}

	if len(errors) > 0 {
		return PingDelaySettingsMultiError(errors)
	}

	return nil
}

// PingDelaySettingsMultiError is an error wrapping multiple validation errors
// returned by PingDelaySettings.ValidateAll() if the designated constraints
// aren't met.
type PingDelaySettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingDelaySettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingDelaySettingsMultiError) AllErrors() []error { return m }

// PingDelaySettingsValidationError is the validation error returned by
// PingDelaySettings.Validate if the designated constraints aren't met.
type PingDelaySettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingDelaySettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingDelaySettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingDelaySettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingDelaySettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingDelaySettingsValidationError) ErrorName() string {
	return "PingDelaySettingsValidationError"
}

// Error satisfies the builtin error interface
func (e PingDelaySettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingDelaySettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingDelaySettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingDelaySettingsValidationError{}

// Validate checks the field values on Ping with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingMultiError, or nil if none found.
func (m *Ping) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StreamId

	if m.PingRequestTime != nil {

		if all {
			switch v := interface{}(m.GetPingRequestTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PingValidationError{
						field:  "PingRequestTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PingValidationError{
						field:  "PingRequestTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPingRequestTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PingValidationError{
					field:  "PingRequestTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PingMultiError(errors)
	}

	return nil
}

// PingMultiError is an error wrapping multiple validation errors returned by
// Ping.ValidateAll() if the designated constraints aren't met.
type PingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingMultiError) AllErrors() []error { return m }

// PingValidationError is the validation error returned by Ping.Validate if the
// designated constraints aren't met.
type PingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingValidationError) ErrorName() string { return "PingValidationError" }

// Error satisfies the builtin error interface
func (e PingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Page with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PageMultiError, or nil if none found.
func (m *Page) ValidateAll() error {
	return m.validate(true)
}

func (m *Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return PageMultiError(errors)
	}

	return nil
}

// PageMultiError is an error wrapping multiple validation errors returned by
// Page.ValidateAll() if the designated constraints aren't met.
type PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageMultiError) AllErrors() []error { return m }

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on PageResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageResponseMultiError, or
// nil if none found.
func (m *PageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for PageNumber

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return PageResponseMultiError(errors)
	}

	return nil
}

// PageResponseMultiError is an error wrapping multiple validation errors
// returned by PageResponse.ValidateAll() if the designated constraints aren't met.
type PageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResponseMultiError) AllErrors() []error { return m }

// PageResponseValidationError is the validation error returned by
// PageResponse.Validate if the designated constraints aren't met.
type PageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResponseValidationError) ErrorName() string { return "PageResponseValidationError" }

// Error satisfies the builtin error interface
func (e PageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResponseValidationError{}

// Validate checks the field values on ResponseMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResponseMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseMetadataMultiError, or nil if none found.
func (m *ResponseMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackingId

	if all {
		switch v := interface{}(m.GetServerTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMetadataValidationError{
					field:  "ServerTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMetadataValidationError{
					field:  "ServerTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServerTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMetadataValidationError{
				field:  "ServerTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseMetadataMultiError(errors)
	}

	return nil
}

// ResponseMetadataMultiError is an error wrapping multiple validation errors
// returned by ResponseMetadata.ValidateAll() if the designated constraints
// aren't met.
type ResponseMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMetadataMultiError) AllErrors() []error { return m }

// ResponseMetadataValidationError is the validation error returned by
// ResponseMetadata.Validate if the designated constraints aren't met.
type ResponseMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMetadataValidationError) ErrorName() string { return "ResponseMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMetadataValidationError{}

// Validate checks the field values on BrandData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BrandData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BrandDataMultiError, or nil
// if none found.
func (m *BrandData) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogoName

	// no validation rules for LogoBaseColor

	// no validation rules for TextColor

	if len(errors) > 0 {
		return BrandDataMultiError(errors)
	}

	return nil
}

// BrandDataMultiError is an error wrapping multiple validation errors returned
// by BrandData.ValidateAll() if the designated constraints aren't met.
type BrandDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandDataMultiError) AllErrors() []error { return m }

// BrandDataValidationError is the validation error returned by
// BrandData.Validate if the designated constraints aren't met.
type BrandDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandDataValidationError) ErrorName() string { return "BrandDataValidationError" }

// Error satisfies the builtin error interface
func (e BrandDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandDataValidationError{}

// Validate checks the field values on ErrorDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorDetailMultiError, or
// nil if none found.
func (m *ErrorDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorDetailMultiError(errors)
	}

	return nil
}

// ErrorDetailMultiError is an error wrapping multiple validation errors
// returned by ErrorDetail.ValidateAll() if the designated constraints aren't met.
type ErrorDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorDetailMultiError) AllErrors() []error { return m }

// ErrorDetailValidationError is the validation error returned by
// ErrorDetail.Validate if the designated constraints aren't met.
type ErrorDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDetailValidationError) ErrorName() string { return "ErrorDetailValidationError" }

// Error satisfies the builtin error interface
func (e ErrorDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDetailValidationError{}
