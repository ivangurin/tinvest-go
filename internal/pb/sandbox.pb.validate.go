// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sandbox.proto

package contractv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OpenSandboxAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSandboxAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSandboxAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSandboxAccountRequestMultiError, or nil if none found.
func (m *OpenSandboxAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSandboxAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return OpenSandboxAccountRequestMultiError(errors)
	}

	return nil
}

// OpenSandboxAccountRequestMultiError is an error wrapping multiple validation
// errors returned by OpenSandboxAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type OpenSandboxAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSandboxAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSandboxAccountRequestMultiError) AllErrors() []error { return m }

// OpenSandboxAccountRequestValidationError is the validation error returned by
// OpenSandboxAccountRequest.Validate if the designated constraints aren't met.
type OpenSandboxAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSandboxAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSandboxAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSandboxAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSandboxAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSandboxAccountRequestValidationError) ErrorName() string {
	return "OpenSandboxAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSandboxAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSandboxAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSandboxAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSandboxAccountRequestValidationError{}

// Validate checks the field values on OpenSandboxAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSandboxAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSandboxAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSandboxAccountResponseMultiError, or nil if none found.
func (m *OpenSandboxAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSandboxAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return OpenSandboxAccountResponseMultiError(errors)
	}

	return nil
}

// OpenSandboxAccountResponseMultiError is an error wrapping multiple
// validation errors returned by OpenSandboxAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type OpenSandboxAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSandboxAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSandboxAccountResponseMultiError) AllErrors() []error { return m }

// OpenSandboxAccountResponseValidationError is the validation error returned
// by OpenSandboxAccountResponse.Validate if the designated constraints aren't met.
type OpenSandboxAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSandboxAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSandboxAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSandboxAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSandboxAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSandboxAccountResponseValidationError) ErrorName() string {
	return "OpenSandboxAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSandboxAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSandboxAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSandboxAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSandboxAccountResponseValidationError{}

// Validate checks the field values on CloseSandboxAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseSandboxAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseSandboxAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseSandboxAccountRequestMultiError, or nil if none found.
func (m *CloseSandboxAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseSandboxAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CloseSandboxAccountRequestMultiError(errors)
	}

	return nil
}

// CloseSandboxAccountRequestMultiError is an error wrapping multiple
// validation errors returned by CloseSandboxAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type CloseSandboxAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseSandboxAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseSandboxAccountRequestMultiError) AllErrors() []error { return m }

// CloseSandboxAccountRequestValidationError is the validation error returned
// by CloseSandboxAccountRequest.Validate if the designated constraints aren't met.
type CloseSandboxAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseSandboxAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseSandboxAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseSandboxAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseSandboxAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseSandboxAccountRequestValidationError) ErrorName() string {
	return "CloseSandboxAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseSandboxAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseSandboxAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseSandboxAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseSandboxAccountRequestValidationError{}

// Validate checks the field values on CloseSandboxAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseSandboxAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseSandboxAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseSandboxAccountResponseMultiError, or nil if none found.
func (m *CloseSandboxAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseSandboxAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloseSandboxAccountResponseMultiError(errors)
	}

	return nil
}

// CloseSandboxAccountResponseMultiError is an error wrapping multiple
// validation errors returned by CloseSandboxAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type CloseSandboxAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseSandboxAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseSandboxAccountResponseMultiError) AllErrors() []error { return m }

// CloseSandboxAccountResponseValidationError is the validation error returned
// by CloseSandboxAccountResponse.Validate if the designated constraints
// aren't met.
type CloseSandboxAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseSandboxAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseSandboxAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseSandboxAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseSandboxAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseSandboxAccountResponseValidationError) ErrorName() string {
	return "CloseSandboxAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseSandboxAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseSandboxAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseSandboxAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseSandboxAccountResponseValidationError{}

// Validate checks the field values on SandboxPayInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SandboxPayInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SandboxPayInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SandboxPayInRequestMultiError, or nil if none found.
func (m *SandboxPayInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SandboxPayInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SandboxPayInRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SandboxPayInRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SandboxPayInRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SandboxPayInRequestMultiError(errors)
	}

	return nil
}

// SandboxPayInRequestMultiError is an error wrapping multiple validation
// errors returned by SandboxPayInRequest.ValidateAll() if the designated
// constraints aren't met.
type SandboxPayInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SandboxPayInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SandboxPayInRequestMultiError) AllErrors() []error { return m }

// SandboxPayInRequestValidationError is the validation error returned by
// SandboxPayInRequest.Validate if the designated constraints aren't met.
type SandboxPayInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SandboxPayInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SandboxPayInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SandboxPayInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SandboxPayInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SandboxPayInRequestValidationError) ErrorName() string {
	return "SandboxPayInRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SandboxPayInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSandboxPayInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SandboxPayInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SandboxPayInRequestValidationError{}

// Validate checks the field values on SandboxPayInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SandboxPayInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SandboxPayInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SandboxPayInResponseMultiError, or nil if none found.
func (m *SandboxPayInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SandboxPayInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBalance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SandboxPayInResponseValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SandboxPayInResponseValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBalance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SandboxPayInResponseValidationError{
				field:  "Balance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SandboxPayInResponseMultiError(errors)
	}

	return nil
}

// SandboxPayInResponseMultiError is an error wrapping multiple validation
// errors returned by SandboxPayInResponse.ValidateAll() if the designated
// constraints aren't met.
type SandboxPayInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SandboxPayInResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SandboxPayInResponseMultiError) AllErrors() []error { return m }

// SandboxPayInResponseValidationError is the validation error returned by
// SandboxPayInResponse.Validate if the designated constraints aren't met.
type SandboxPayInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SandboxPayInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SandboxPayInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SandboxPayInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SandboxPayInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SandboxPayInResponseValidationError) ErrorName() string {
	return "SandboxPayInResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SandboxPayInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSandboxPayInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SandboxPayInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SandboxPayInResponseValidationError{}
