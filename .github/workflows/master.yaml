name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Linter
        run: make lint

      - name: Test
        run: make test

  build_and_push:
    needs: test

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ github.actor}}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push
  #   steps:
  #     - name: Deploy
  #       uses: appleboy/ssh-action@v0.1.3
  #       with:
  #         host: ${{ vars.SERVER_HOST }}
  #         username: ${{ vars.SERVER_USERNAME }}
  #         password: ${{ secrets.SERVER_PASSWORD }}
  #         port: ${{ vars.SERVER_PORT }}
  #         script: |

  #           # Set env variables
  #           export TINVEST_BOT_TOKEN=${{ secrets.TINVEST_BOT_TOKEN }}
  #           export TINVEST_BOT_DEBUG=${{ vars.TINVEST_BOT_DEBUG }}

  #           # Login into Docker Registry
  #           docker login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

  #           # Stop running container
  #           docker stop ${{ vars.CONTAINER_NAME }}

  #           # Remove old container
  #           docker rm ${{ vars.CONTAINER_NAME }}

  #           # Remove old image
  #           docker rmi ${{ vars.IMAGE_NAME }}

  #           # Run a new container from a new image
  #           docker run -d \
  #           --name ${{ vars.CONTAINER_NAME }}  \
  #           -e TINVEST_BOT_TOKEN \
  #           -e TINVEST_BOT_DEBUG \
  #           -v $(echo $PWD)/database:/app/database \
  #           --restart always \
  #           ${{ vars.IMAGE_NAME }}
